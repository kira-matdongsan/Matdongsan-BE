name: Deploy Matdongsan API to EC2

on:
  push:
    branches:
      - develop
    paths:
      - '**'
  workflow_dispatch:

env:
  DEFAULT_COMMIT_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Capture Start Time
        id: start
        run: |
          echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
          echo "start_iso=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: Notify Discord on Deploy Start
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_API }}
          username: "Matdongsan API Deploy"
          avatar-url: "https://i.pinimg.com/736x/b1/6a/68/b16a68e999f2b27ab34b656ef313c674.jpg"
          embed-title: "🚀 Matdongsan Dev API 배포 시작"
          embed-url: "${{ env.DEFAULT_COMMIT_URL }}"
          embed-description: |
            - 🌿 브랜치: `${{ github.ref_name }}`
            - 👤 작성자: `${{ github.event.head_commit.author.name || github.actor }}`
            - 📝 커밋: [${{ github.event.head_commit.message || '수동 실행' }}](${{ github.event.head_commit.url || env.DEFAULT_COMMIT_URL }})
          embed-color: 3447003
          embed-timestamp: ${{ steps.start.outputs.start_iso }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build JAR with Gradle
        run: ./gradlew clean bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPOSITORY }} .

      - name: Tag and Push Docker image to ECR
        run: |
          IMAGE_URI=${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest
          docker tag ${{ secrets.AWS_ECR_REPOSITORY }} $IMAGE_URI
          docker push $IMAGE_URI

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > key.pem
          chmod 400 key.pem

      - name: SSH to EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            IMAGE_URI="${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:latest"

            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          
            docker stop ${{ secrets.AWS_ECR_REPOSITORY }} || true
            docker rm ${{ secrets.AWS_ECR_REPOSITORY }} || true
          
            docker pull $IMAGE_URI
          
            docker run -d \
              --name ${{ secrets.AWS_ECR_REPOSITORY }} \
              --env-file ~/.env \
              -p 8080:8080 \
              $IMAGE_URI
          EOF

          rm -f key.pem

      - name: Capture End Time and Duration
        id: end
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start.outputs.start_time }}
          duration=$(( end_time - start_time ))
          echo "duration=${duration}" >> $GITHUB_OUTPUT
          echo "end_iso=$(date --iso-8601=seconds)" >> $GITHUB_OUTPUT

      - name: Notify Discord on Success
        if: success()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_API }}
          username: "Matdongsan API Deploy"
          avatar-url: "https://i.pinimg.com/736x/b1/6a/68/b16a68e999f2b27ab34b656ef313c674.jpg"
          embed-title: "✅ Matdongsan Dev API 배포 성공"
          embed-url: "${{ env.DEFAULT_COMMIT_URL }}"
          embed-description: |
            최신 커밋 기준으로 API 서버가 정상적으로 배포되었습니다.
            ⏱️ 소요 시간: `${{ steps.end.outputs.duration }}초`
          embed-color: 5763719
          embed-timestamp: ${{ steps.end.outputs.end_iso }}

      - name: Notify Discord on Failure
        if: failure()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_API }}
          username: "Matdongsan API Deploy"
          avatar-url: "https://i.pinimg.com/736x/b1/6a/68/b16a68e999f2b27ab34b656ef313c674.jpg"
          embed-title: "❌ Matdongsan Dev API 배포 실패"
          embed-url: "${{ env.DEFAULT_COMMIT_URL }}"
          embed-description: |
            오류가 발생하여 배포가 중단되었습니다.
            ⏱️ 소요 시간: `${{ steps.end.outputs.duration }}초`
          embed-color: 15548997
          embed-timestamp: ${{ steps.end.outputs.end_iso }}
